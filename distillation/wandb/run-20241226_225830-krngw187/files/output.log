Starting training from scratch.
Initializing distributed: GLOBAL_RANK: 1, MEMBER: 2/2
LOCAL_RANK: 1 - CUDA_VISIBLE_DEVICES: [0,1]
[rank1]: Traceback (most recent call last):
[rank1]:   File "/storage/disk0/arda/dinov2/distillation/train.py", line 202, in <module>
[rank1]:     main()
[rank1]:   File "/storage/disk0/arda/dinov2/distillation/train.py", line 198, in main
[rank1]:     trainer.train()
[rank1]:   File "/storage/disk0/arda/dinov2/distillation/train.py", line 159, in train
[rank1]:     self.trainer.fit(self.distillation_module, self.data_module)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/trainer/trainer.py", line 538, in fit
[rank1]:     call._call_and_handle_interrupt(
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/trainer/call.py", line 46, in _call_and_handle_interrupt
[rank1]:     return trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/strategies/launchers/subprocess_script.py", line 105, in launch
[rank1]:     return function(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/trainer/trainer.py", line 574, in _fit_impl
[rank1]:     self._run(model, ckpt_path=ckpt_path)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/trainer/trainer.py", line 981, in _run
[rank1]:     results = self._run_stage()
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/trainer/trainer.py", line 1025, in _run_stage
[rank1]:     self.fit_loop.run()
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/fit_loop.py", line 205, in run
[rank1]:     self.advance()
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/fit_loop.py", line 363, in advance
[rank1]:     self.epoch_loop.run(self._data_fetcher)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/training_epoch_loop.py", line 140, in run
[rank1]:     self.advance(data_fetcher)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/training_epoch_loop.py", line 250, in advance
[rank1]:     batch_output = self.automatic_optimization.run(trainer.optimizers[0], batch_idx, kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/optimization/automatic.py", line 190, in run
[rank1]:     self._optimizer_step(batch_idx, closure)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/optimization/automatic.py", line 268, in _optimizer_step
[rank1]:     call._call_lightning_module_hook(
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/trainer/call.py", line 167, in _call_lightning_module_hook
[rank1]:     output = fn(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/core/module.py", line 1306, in optimizer_step
[rank1]:     optimizer.step(closure=optimizer_closure)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/core/optimizer.py", line 153, in step
[rank1]:     step_output = self._strategy.optimizer_step(self._optimizer, closure, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/strategies/ddp.py", line 270, in optimizer_step
[rank1]:     optimizer_output = super().optimizer_step(optimizer, closure, model, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/strategies/strategy.py", line 238, in optimizer_step
[rank1]:     return self.precision_plugin.optimizer_step(optimizer, model=model, closure=closure, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/plugins/precision/amp.py", line 78, in optimizer_step
[rank1]:     closure_result = closure()
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/optimization/automatic.py", line 144, in __call__
[rank1]:     self._result = self.closure(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
[rank1]:     return func(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/optimization/automatic.py", line 129, in closure
[rank1]:     step_output = self._step_fn()
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/loops/optimization/automatic.py", line 317, in _training_step
[rank1]:     training_step_output = call._call_strategy_hook(trainer, "training_step", *kwargs.values())
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/trainer/call.py", line 319, in _call_strategy_hook
[rank1]:     output = fn(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/strategies/strategy.py", line 389, in training_step
[rank1]:     return self._forward_redirection(self.model, self.lightning_module, "training_step", *args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/strategies/strategy.py", line 640, in __call__
[rank1]:     wrapper_output = wrapper_module(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank1]:     return self._call_impl(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank1]:     return forward_call(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1643, in forward
[rank1]:     else self._run_ddp_forward(*inputs, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1459, in _run_ddp_forward
[rank1]:     return self.module(*inputs, **kwargs)  # type: ignore[index]
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank1]:     return self._call_impl(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank1]:     return forward_call(*args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/strategies/strategy.py", line 633, in wrapped_forward
[rank1]:     out = method(*_args, **_kwargs)
[rank1]:   File "/storage/disk0/arda/dinov2/distillation/train/distillation_module.py", line 56, in training_step
[rank1]:     self._log_training_metrics(losses, features)
[rank1]:   File "/storage/disk0/arda/dinov2/distillation/train/distillation_module.py", line 86, in _log_training_metrics
[rank1]:     self.log('train_cosine_loss', losses['cosine'], sync_dist=True)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/core/module.py", line 479, in log
[rank1]:     value = apply_to_collection(value, (Tensor, numbers.Number), self.__to_tensor, name)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning_utilities/core/apply_func.py", line 64, in apply_to_collection
[rank1]:     return function(data, *args, **kwargs)
[rank1]:   File "/home/arda/miniconda3/envs/distillation/lib/python3.10/site-packages/lightning/pytorch/core/module.py", line 659, in __to_tensor
[rank1]:     raise ValueError(
[rank1]: ValueError: `self.log(train_cosine_loss, tensor([[[0.9965, 1.0177, 1.0414,  ..., 1.0368, 1.0244, 1.0340],
[rank1]:          [1.0027, 1.0257, 1.0631,  ..., 1.0115, 1.0065, 0.9990],
[rank1]:          [1.0034, 1.0012, 0.9695,  ..., 0.9943, 1.0161, 1.0182],
[rank1]:          ...,
[rank1]:          [1.0085, 1.0328, 1.0243,  ..., 1.0189, 1.0193, 1.0085],
[rank1]:          [1.0116, 0.9970, 1.0009,  ..., 0.9716, 1.0010, 1.0018],
[rank1]:          [1.0083, 0.9901, 1.0018,  ..., 0.9950, 1.0026, 1.0077]],

[rank1]:         [[1.0269, 1.0258, 0.9793,  ..., 1.0227, 1.0393, 1.0008],
[rank1]:          [1.0285, 0.9932, 1.0065,  ..., 1.0371, 1.0053, 1.0103],
[rank1]:          [0.9914, 1.0062, 1.0451,  ..., 1.0329, 1.0295, 1.0286],
[rank1]:          ...,
[rank1]:          [1.0068, 1.0002, 0.9754,  ..., 0.9794, 0.9769, 0.9947],
[rank1]:          [1.0223, 1.0498, 1.0239,  ..., 1.0218, 0.9819, 0.9926],
[rank1]:          [1.0290, 0.9920, 0.9968,  ..., 0.9752, 0.9671, 0.9657]],

[rank1]:         [[1.0489, 1.0604, 1.0533,  ..., 1.0348, 1.0437, 0.9967],
[rank1]:          [1.0682, 1.0635, 1.0200,  ..., 1.0197, 1.0325, 0.9884],
[rank1]:          [1.0646, 1.0451, 1.0490,  ..., 1.0065, 1.0195, 1.0054],
[rank1]:          ...,
[rank1]:          [1.0127, 0.9992, 0.9743,  ..., 0.9748, 1.0116, 1.0141],
[rank1]:          [1.0076, 0.9723, 1.0409,  ..., 0.9756, 1.0013, 0.9710],
[rank1]:          [1.0342, 1.0384, 1.0341,  ..., 0.9839, 1.0101, 0.9716]],

[rank1]:         ...,

[rank1]:         [[1.0050, 1.0041, 1.0020,  ..., 1.0130, 1.0109, 0.9946],
[rank1]:          [1.0122, 1.0140, 1.0199,  ..., 1.0237, 1.0074, 1.0154],
[rank1]:          [1.0159, 1.0053, 0.9941,  ..., 1.0157, 1.0166, 1.0222],
[rank1]:          ...,
[rank1]:          [1.0259, 1.0260, 0.9536,  ..., 1.0199, 1.0122, 1.0240],
[rank1]:          [0.9970, 1.0275, 1.0151,  ..., 0.9537, 1.0031, 1.0111],
[rank1]:          [1.0096, 1.0097, 0.9946,  ..., 0.9986, 0.9947, 1.0153]],

[rank1]:         [[0.9951, 0.9937, 1.0206,  ..., 0.9977, 0.9974, 0.9839],
[rank1]:          [0.9802, 0.9718, 1.0160,  ..., 1.0177, 1.0137, 0.9912],
[rank1]:          [1.0377, 0.9918, 1.0116,  ..., 1.0295, 1.0124, 0.9959],
[rank1]:          ...,
[rank1]:          [0.9896, 1.0113, 1.0093,  ..., 1.0025, 0.9956, 1.0100],
[rank1]:          [1.0459, 1.0223, 1.0054,  ..., 0.9657, 0.9749, 0.9616],
[rank1]:          [0.9833, 1.0135, 1.0218,  ..., 1.0036, 0.9720, 0.9582]],

[rank1]:         [[1.0357, 0.9779, 0.9912,  ..., 0.9797, 0.9712, 0.9764],
[rank1]:          [1.0400, 0.9790, 0.9795,  ..., 1.0258, 1.0005, 1.0234],
[rank1]:          [1.0320, 1.0131, 1.0120,  ..., 1.0283, 1.0030, 0.9947],
[rank1]:          ...,
[rank1]:          [0.9996, 1.0269, 0.9949,  ..., 1.0274, 0.9934, 0.9572],
[rank1]:          [1.0329, 0.9997, 1.0176,  ..., 1.0117, 0.9757, 1.0113],
[rank1]:          [1.0089, 0.9990, 1.0093,  ..., 1.0076, 1.0177, 1.0010]]],
[rank1]:        device='cuda:1'))` was called, but the tensor must have a single element. You can try doing `self.log(train_cosine_loss, tensor([[[0.9965, 1.0177, 1.0414,  ..., 1.0368, 1.0244, 1.0340],
[rank1]:          [1.0027, 1.0257, 1.0631,  ..., 1.0115, 1.0065, 0.9990],
[rank1]:          [1.0034, 1.0012, 0.9695,  ..., 0.9943, 1.0161, 1.0182],
[rank1]:          ...,
[rank1]:          [1.0085, 1.0328, 1.0243,  ..., 1.0189, 1.0193, 1.0085],
[rank1]:          [1.0116, 0.9970, 1.0009,  ..., 0.9716, 1.0010, 1.0018],
[rank1]:          [1.0083, 0.9901, 1.0018,  ..., 0.9950, 1.0026, 1.0077]],

[rank1]:         [[1.0269, 1.0258, 0.9793,  ..., 1.0227, 1.0393, 1.0008],
[rank1]:          [1.0285, 0.9932, 1.0065,  ..., 1.0371, 1.0053, 1.0103],
[rank1]:          [0.9914, 1.0062, 1.0451,  ..., 1.0329, 1.0295, 1.0286],
[rank1]:          ...,
[rank1]:          [1.0068, 1.0002, 0.9754,  ..., 0.9794, 0.9769, 0.9947],
[rank1]:          [1.0223, 1.0498, 1.0239,  ..., 1.0218, 0.9819, 0.9926],
[rank1]:          [1.0290, 0.9920, 0.9968,  ..., 0.9752, 0.9671, 0.9657]],

[rank1]:         [[1.0489, 1.0604, 1.0533,  ..., 1.0348, 1.0437, 0.9967],
[rank1]:          [1.0682, 1.0635, 1.0200,  ..., 1.0197, 1.0325, 0.9884],
[rank1]:          [1.0646, 1.0451, 1.0490,  ..., 1.0065, 1.0195, 1.0054],
[rank1]:          ...,
[rank1]:          [1.0127, 0.9992, 0.9743,  ..., 0.9748, 1.0116, 1.0141],
[rank1]:          [1.0076, 0.9723, 1.0409,  ..., 0.9756, 1.0013, 0.9710],
[rank1]:          [1.0342, 1.0384, 1.0341,  ..., 0.9839, 1.0101, 0.9716]],

[rank1]:         ...,

[rank1]:         [[1.0050, 1.0041, 1.0020,  ..., 1.0130, 1.0109, 0.9946],
[rank1]:          [1.0122, 1.0140, 1.0199,  ..., 1.0237, 1.0074, 1.0154],
[rank1]:          [1.0159, 1.0053, 0.9941,  ..., 1.0157, 1.0166, 1.0222],
[rank1]:          ...,
[rank1]:          [1.0259, 1.0260, 0.9536,  ..., 1.0199, 1.0122, 1.0240],
[rank1]:          [0.9970, 1.0275, 1.0151,  ..., 0.9537, 1.0031, 1.0111],
[rank1]:          [1.0096, 1.0097, 0.9946,  ..., 0.9986, 0.9947, 1.0153]],

[rank1]:         [[0.9951, 0.9937, 1.0206,  ..., 0.9977, 0.9974, 0.9839],
[rank1]:          [0.9802, 0.9718, 1.0160,  ..., 1.0177, 1.0137, 0.9912],
[rank1]:          [1.0377, 0.9918, 1.0116,  ..., 1.0295, 1.0124, 0.9959],
[rank1]:          ...,
[rank1]:          [0.9896, 1.0113, 1.0093,  ..., 1.0025, 0.9956, 1.0100],
[rank1]:          [1.0459, 1.0223, 1.0054,  ..., 0.9657, 0.9749, 0.9616],
[rank1]:          [0.9833, 1.0135, 1.0218,  ..., 1.0036, 0.9720, 0.9582]],

[rank1]:         [[1.0357, 0.9779, 0.9912,  ..., 0.9797, 0.9712, 0.9764],
[rank1]:          [1.0400, 0.9790, 0.9795,  ..., 1.0258, 1.0005, 1.0234],
[rank1]:          [1.0320, 1.0131, 1.0120,  ..., 1.0283, 1.0030, 0.9947],
[rank1]:          ...,
[rank1]:          [0.9996, 1.0269, 0.9949,  ..., 1.0274, 0.9934, 0.9572],
[rank1]:          [1.0329, 0.9997, 1.0176,  ..., 1.0117, 0.9757, 1.0113],
[rank1]:          [1.0089, 0.9990, 1.0093,  ..., 1.0076, 1.0177, 1.0010]]],
[rank1]:        device='cuda:1').mean())`
